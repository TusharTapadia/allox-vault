/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ErrorLibrary,
  ErrorLibraryInterface,
} from "../../../contracts/library/ErrorLibrary";

const _abi = [
  {
    inputs: [],
    name: "AddressAlreadyApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressNotApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyOngoingOperation",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyRedeemed",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "BuyAndSellTokenAreSame",
    type: "error",
  },
  {
    inputs: [],
    name: "BuyTokenAddressNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "CallFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerIsNotAssetManager",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotAssetManager",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotFeeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotHandlerContract",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotHavingGivenTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotMinter",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotOffChainContract",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotRebalancerContract",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotStrategyManager",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotSuperAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotVault",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotVaultManager",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotWhitelistManager",
    type: "error",
  },
  {
    inputs: [],
    name: "ContractIsNotPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "ContractNotPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "ContractPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "CoolDownPeriodNotPassed",
    type: "error",
  },
  {
    inputs: [],
    name: "DivBy0Sumweight",
    type: "error",
  },
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "FULLDIV_OVERFLOW",
    type: "error",
  },
  {
    inputs: [],
    name: "FifteenMinutesNotExcedeed",
    type: "error",
  },
  {
    inputs: [],
    name: "HandlerAlreadyDisabled",
    type: "error",
  },
  {
    inputs: [],
    name: "HandlerAlreadyEnabled",
    type: "error",
  },
  {
    inputs: [],
    name: "ImplementationNotCorrect",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectArrayLength",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectInvestmentTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectSlippageRange",
    type: "error",
  },
  {
    inputs: [],
    name: "IndexCreationIsPause",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
    ],
    name: "InsufficientFeeFunds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
    ],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientTokenABalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientTokenBBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidBuyValues",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDenorms",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidExecution",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidFee",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidHandlerAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitInput",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInputTokenList",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLPSlippage",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLength",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMaxInvestmentAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMinInvestmentAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOracleAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOutAsset",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPID",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSellAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSlippage",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSlippageLength",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidThresholdLength",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidToken",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenLength",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWeight",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWeights",
    type: "error",
  },
  {
    inputs: [],
    name: "LengthsDontMatch",
    type: "error",
  },
  {
    inputs: [],
    name: "LowBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "LpBalanceZero",
    type: "error",
  },
  {
    inputs: [],
    name: "MintAmountMustBeEqualToValue",
    type: "error",
  },
  {
    inputs: [],
    name: "MintAmountMustBeEqualToValuePassed",
    type: "error",
  },
  {
    inputs: [],
    name: "MintAmountNotEqualToPassedValue",
    type: "error",
  },
  {
    inputs: [],
    name: "MintProcessFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleNotInitialised",
    type: "error",
  },
  {
    inputs: [],
    name: "NoNewFeeSet",
    type: "error",
  },
  {
    inputs: [],
    name: "NoOwnerPassed",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBNB",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceInAlpacaProtocol",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceInApeSwap",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceInBeefy",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceInBeefyProtocol",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceInBiSwapProtocol",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceInLiqeeProtocol",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceInPancakeProtocol",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceInWombatProtocol",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPrimaryToken",
    type: "error",
  },
  {
    inputs: [],
    name: "NotRedeemed",
    type: "error",
  },
  {
    inputs: [],
    name: "NotRewardToken",
    type: "error",
  },
  {
    inputs: [],
    name: "NotVToken",
    type: "error",
  },
  {
    inputs: [],
    name: "OffHandlerNotEnabled",
    type: "error",
  },
  {
    inputs: [],
    name: "OffHandlerNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyAssetManagerCanCall",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyAssetManagerCanCallUnpause",
    type: "error",
  },
  {
    inputs: [],
    name: "PleaseDepositUnderlyingToken",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceOracleExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceOracleInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "ProtocolIsPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "ProtocolNotPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "ProtocolPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "PublicFundToWhitelistedNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "RedeemingCTokenFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "RedeemingFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "SlippageCannotBeGreaterThan100",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapHandlerNotEnabled",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapHandlerNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "SwaphandlerNotEnabled",
    type: "error",
  },
  {
    inputs: [],
    name: "TimePeriodNotOver",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenAlreadyExist",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenAlreadyRedeemed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "TokenCountOutOfLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotETH",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotEnabled",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotInPriceOracle",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotIndexToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotPermitted",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotPrimary",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "TokensNotRedeemed",
    type: "error",
  },
  {
    inputs: [],
    name: "TokensNotStaked",
    type: "error",
  },
  {
    inputs: [],
    name: "TokensStaked",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "Transferprohibited",
    type: "error",
  },
  {
    inputs: [],
    name: "UserNotAllowedToInvest",
    type: "error",
  },
  {
    inputs: [],
    name: "WeightNotGreaterThan0",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawTransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minInvestment",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxInvestment",
        type: "uint256",
      },
    ],
    name: "WrongInvestmentAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongNativeValuePassed",
    type: "error",
  },
  {
    inputs: [],
    name: "ZERO_ADDRESS",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressTreasury",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroBalanceAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroDenormValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroFee",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroFinalInvestmentValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroInvestedAmountAfterSlippage",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroTokensSwapped",
    type: "error",
  },
  {
    inputs: [],
    name: "_tokenOutNotPermitted",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ad983aae002e9dd312fea4d032e8f0bf18dbc764c75ce6a848d22650a96265de64736f6c63430008140033";

type ErrorLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorLibraryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ErrorLibrary__factory extends ContractFactory {
  constructor(...args: ErrorLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ErrorLibrary> {
    return super.deploy(overrides || {}) as Promise<ErrorLibrary>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ErrorLibrary {
    return super.attach(address) as ErrorLibrary;
  }
  override connect(signer: Signer): ErrorLibrary__factory {
    return super.connect(signer) as ErrorLibrary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorLibraryInterface {
    return new utils.Interface(_abi) as ErrorLibraryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ErrorLibrary {
    return new Contract(address, _abi, signerOrProvider) as ErrorLibrary;
  }
}
