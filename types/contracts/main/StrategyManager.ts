/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface StrategyManagerInterface extends utils.Interface {
  functions: {
    "RATIO_SCALE()": FunctionFragment;
    "accessController()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "deposit(address,uint256,uint256)": FunctionFragment;
    "getUnderlyingTokenBalance()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "newStrategyTokens(uint256)": FunctionFragment;
    "newStrategyWeights(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolRegistry()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setVaultTokens(address[],uint256[])": FunctionFragment;
    "strategyTokens(uint256)": FunctionFragment;
    "strategyWeights(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateStrategy(address[],uint256[],uint256)": FunctionFragment;
    "updateStrategyWeights(uint256[],uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RATIO_SCALE"
      | "accessController"
      | "baseToken"
      | "deposit"
      | "getUnderlyingTokenBalance"
      | "initialize"
      | "newStrategyTokens"
      | "newStrategyWeights"
      | "owner"
      | "protocolRegistry"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setVaultTokens"
      | "strategyTokens"
      | "strategyWeights"
      | "transferOwnership"
      | "updateStrategy"
      | "updateStrategyWeights"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vault"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RATIO_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newStrategyTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newStrategyWeights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultTokens",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyWeights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategy",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyWeights",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "RATIO_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newStrategyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newStrategyWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DepositExecuted(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StrategiesAndRatiosChangedEvent(address,bool)": EventFragment;
    "StrategyManagerInitialized(address,address,address,address)": EventFragment;
    "StrategyUpdated(address[],address[],uint256[],uint256)": EventFragment;
    "StrategyWeightsUpdated(uint256[],uint256[],uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VaultTokensSet(address[],uint256[])": EventFragment;
    "WithdrawExecuted(address,uint256,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategiesAndRatiosChangedEvent"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyManagerInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyWeightsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultTokensSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawExecuted"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DepositExecutedEventObject {
  depositToken: string;
  amount: BigNumber;
  investmentAfterDeposit: BigNumber;
}
export type DepositExecutedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositExecutedEventObject
>;

export type DepositExecutedEventFilter = TypedEventFilter<DepositExecutedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StrategiesAndRatiosChangedEventEventObject {
  vault: string;
  isIncrease: boolean;
}
export type StrategiesAndRatiosChangedEventEvent = TypedEvent<
  [string, boolean],
  StrategiesAndRatiosChangedEventEventObject
>;

export type StrategiesAndRatiosChangedEventEventFilter =
  TypedEventFilter<StrategiesAndRatiosChangedEventEvent>;

export interface StrategyManagerInitializedEventObject {
  vault: string;
  accessController: string;
  protocolRegistry: string;
  baseToken: string;
}
export type StrategyManagerInitializedEvent = TypedEvent<
  [string, string, string, string],
  StrategyManagerInitializedEventObject
>;

export type StrategyManagerInitializedEventFilter =
  TypedEventFilter<StrategyManagerInitializedEvent>;

export interface StrategyUpdatedEventObject {
  oldStrategies: string[];
  newStrategies: string[];
  weights: BigNumber[];
  slippage: BigNumber;
}
export type StrategyUpdatedEvent = TypedEvent<
  [string[], string[], BigNumber[], BigNumber],
  StrategyUpdatedEventObject
>;

export type StrategyUpdatedEventFilter = TypedEventFilter<StrategyUpdatedEvent>;

export interface StrategyWeightsUpdatedEventObject {
  oldWeights: BigNumber[];
  newWeights: BigNumber[];
  slippage: BigNumber;
}
export type StrategyWeightsUpdatedEvent = TypedEvent<
  [BigNumber[], BigNumber[], BigNumber],
  StrategyWeightsUpdatedEventObject
>;

export type StrategyWeightsUpdatedEventFilter =
  TypedEventFilter<StrategyWeightsUpdatedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VaultTokensSetEventObject {
  tokens: string[];
  weights: BigNumber[];
}
export type VaultTokensSetEvent = TypedEvent<
  [string[], BigNumber[]],
  VaultTokensSetEventObject
>;

export type VaultTokensSetEventFilter = TypedEventFilter<VaultTokensSetEvent>;

export interface WithdrawExecutedEventObject {
  withdrawToken: string;
  amount: BigNumber;
  strategyWithdrawals: BigNumber[];
}
export type WithdrawExecutedEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  WithdrawExecutedEventObject
>;

export type WithdrawExecutedEventFilter =
  TypedEventFilter<WithdrawExecutedEvent>;

export interface StrategyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrategyManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RATIO_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    accessController(overrides?: CallOverrides): Promise<[string]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _depositToken: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getUnderlyingTokenBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber]>;

    initialize(
      _vault: string,
      _accessController: string,
      _protocolRegistry: string,
      _baseToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    newStrategyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    newStrategyWeights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolRegistry(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setVaultTokens(
      _tokens: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    strategyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    strategyWeights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStrategy(
      _strategies: string[],
      _weights: BigNumberish[],
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStrategyWeights(
      newWeights: BigNumberish[],
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _withdrawToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  RATIO_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  accessController(overrides?: CallOverrides): Promise<string>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  deposit(
    _depositToken: string,
    _amount: BigNumberish,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getUnderlyingTokenBalance(
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber]>;

  initialize(
    _vault: string,
    _accessController: string,
    _protocolRegistry: string,
    _baseToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  newStrategyTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  newStrategyWeights(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolRegistry(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setVaultTokens(
    _tokens: string[],
    _weights: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  strategyTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  strategyWeights(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStrategy(
    _strategies: string[],
    _weights: BigNumberish[],
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStrategyWeights(
    newWeights: BigNumberish[],
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _withdrawToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    RATIO_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    accessController(overrides?: CallOverrides): Promise<string>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    deposit(
      _depositToken: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingTokenBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber]>;

    initialize(
      _vault: string,
      _accessController: string,
      _protocolRegistry: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    newStrategyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    newStrategyWeights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolRegistry(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setVaultTokens(
      _tokens: string[],
      _weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    strategyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    strategyWeights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategy(
      _strategies: string[],
      _weights: BigNumberish[],
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategyWeights(
      newWeights: BigNumberish[],
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _withdrawToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "DepositExecuted(address,uint256,uint256)"(
      depositToken?: string | null,
      amount?: null,
      investmentAfterDeposit?: null
    ): DepositExecutedEventFilter;
    DepositExecuted(
      depositToken?: string | null,
      amount?: null,
      investmentAfterDeposit?: null
    ): DepositExecutedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StrategiesAndRatiosChangedEvent(address,bool)"(
      vault?: string | null,
      isIncrease?: null
    ): StrategiesAndRatiosChangedEventEventFilter;
    StrategiesAndRatiosChangedEvent(
      vault?: string | null,
      isIncrease?: null
    ): StrategiesAndRatiosChangedEventEventFilter;

    "StrategyManagerInitialized(address,address,address,address)"(
      vault?: string | null,
      accessController?: string | null,
      protocolRegistry?: string | null,
      baseToken?: null
    ): StrategyManagerInitializedEventFilter;
    StrategyManagerInitialized(
      vault?: string | null,
      accessController?: string | null,
      protocolRegistry?: string | null,
      baseToken?: null
    ): StrategyManagerInitializedEventFilter;

    "StrategyUpdated(address[],address[],uint256[],uint256)"(
      oldStrategies?: null,
      newStrategies?: null,
      weights?: null,
      slippage?: null
    ): StrategyUpdatedEventFilter;
    StrategyUpdated(
      oldStrategies?: null,
      newStrategies?: null,
      weights?: null,
      slippage?: null
    ): StrategyUpdatedEventFilter;

    "StrategyWeightsUpdated(uint256[],uint256[],uint256)"(
      oldWeights?: null,
      newWeights?: null,
      slippage?: null
    ): StrategyWeightsUpdatedEventFilter;
    StrategyWeightsUpdated(
      oldWeights?: null,
      newWeights?: null,
      slippage?: null
    ): StrategyWeightsUpdatedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "VaultTokensSet(address[],uint256[])"(
      tokens?: null,
      weights?: null
    ): VaultTokensSetEventFilter;
    VaultTokensSet(tokens?: null, weights?: null): VaultTokensSetEventFilter;

    "WithdrawExecuted(address,uint256,uint256[])"(
      withdrawToken?: string | null,
      amount?: null,
      strategyWithdrawals?: null
    ): WithdrawExecutedEventFilter;
    WithdrawExecuted(
      withdrawToken?: string | null,
      amount?: null,
      strategyWithdrawals?: null
    ): WithdrawExecutedEventFilter;
  };

  estimateGas: {
    RATIO_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    accessController(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _depositToken: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getUnderlyingTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vault: string,
      _accessController: string,
      _protocolRegistry: string,
      _baseToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    newStrategyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newStrategyWeights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setVaultTokens(
      _tokens: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    strategyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyWeights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStrategy(
      _strategies: string[],
      _weights: BigNumberish[],
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStrategyWeights(
      newWeights: BigNumberish[],
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _withdrawToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RATIO_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accessController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _depositToken: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getUnderlyingTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _vault: string,
      _accessController: string,
      _protocolRegistry: string,
      _baseToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    newStrategyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newStrategyWeights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setVaultTokens(
      _tokens: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    strategyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyWeights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStrategy(
      _strategies: string[],
      _weights: BigNumberish[],
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStrategyWeights(
      newWeights: BigNumberish[],
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _withdrawToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
