/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface VaultManagerConfigInterface extends utils.Interface {
  functions: {
    "accessController()": FunctionFragment;
    "allowDepositToken(address[])": FunctionFragment;
    "allowedTokens(address)": FunctionFragment;
    "disallowDepositToken(address[])": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolRegistry()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setVaultManagerFees(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vaultManagerFees()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accessController"
      | "allowDepositToken"
      | "allowedTokens"
      | "disallowDepositToken"
      | "initialize"
      | "owner"
      | "protocolRegistry"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setVaultManagerFees"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vaultManagerFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowDepositToken",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowDepositToken",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultManagerFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultManagerFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultManagerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultManagerFees",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenAllowed(address[])": EventFragment;
    "TokenDisallowed(address[])": EventFragment;
    "Upgraded(address)": EventFragment;
    "VaultManagerFeesUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDisallowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultManagerFeesUpdated"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenAllowedEventObject {
  tokens: string[];
}
export type TokenAllowedEvent = TypedEvent<[string[]], TokenAllowedEventObject>;

export type TokenAllowedEventFilter = TypedEventFilter<TokenAllowedEvent>;

export interface TokenDisallowedEventObject {
  tokens: string[];
}
export type TokenDisallowedEvent = TypedEvent<
  [string[]],
  TokenDisallowedEventObject
>;

export type TokenDisallowedEventFilter = TypedEventFilter<TokenDisallowedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VaultManagerFeesUpdatedEventObject {
  fees: BigNumber;
}
export type VaultManagerFeesUpdatedEvent = TypedEvent<
  [BigNumber],
  VaultManagerFeesUpdatedEventObject
>;

export type VaultManagerFeesUpdatedEventFilter =
  TypedEventFilter<VaultManagerFeesUpdatedEvent>;

export interface VaultManagerConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultManagerConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accessController(overrides?: CallOverrides): Promise<[string]>;

    allowDepositToken(
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowedTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    disallowDepositToken(
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      _accessController: string,
      _protocolRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolRegistry(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setVaultManagerFees(
      _fees: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    vaultManagerFees(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  accessController(overrides?: CallOverrides): Promise<string>;

  allowDepositToken(
    tokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  disallowDepositToken(
    tokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    _accessController: string,
    _protocolRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolRegistry(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setVaultManagerFees(
    _fees: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  vaultManagerFees(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accessController(overrides?: CallOverrides): Promise<string>;

    allowDepositToken(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    disallowDepositToken(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _accessController: string,
      _protocolRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolRegistry(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setVaultManagerFees(
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultManagerFees(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokenAllowed(address[])"(tokens?: null): TokenAllowedEventFilter;
    TokenAllowed(tokens?: null): TokenAllowedEventFilter;

    "TokenDisallowed(address[])"(tokens?: null): TokenDisallowedEventFilter;
    TokenDisallowed(tokens?: null): TokenDisallowedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "VaultManagerFeesUpdated(uint256)"(
      fees?: null
    ): VaultManagerFeesUpdatedEventFilter;
    VaultManagerFeesUpdated(fees?: null): VaultManagerFeesUpdatedEventFilter;
  };

  estimateGas: {
    accessController(overrides?: CallOverrides): Promise<BigNumber>;

    allowDepositToken(
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    disallowDepositToken(
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      _accessController: string,
      _protocolRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setVaultManagerFees(
      _fees: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    vaultManagerFees(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accessController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowDepositToken(
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disallowDepositToken(
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      _accessController: string,
      _protocolRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setVaultManagerFees(
      _fees: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vaultManagerFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
