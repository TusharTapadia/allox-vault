/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IVaultManagerConfigInterface extends utils.Interface {
  functions: {
    "accessController()": FunctionFragment;
    "allowDepositToken(address[])": FunctionFragment;
    "allowedTokens(address)": FunctionFragment;
    "disallowDepositToken(address[])": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "setVaultManagerFees(uint256)": FunctionFragment;
    "vaultManagerFees()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accessController"
      | "allowDepositToken"
      | "allowedTokens"
      | "disallowDepositToken"
      | "initialize"
      | "setVaultManagerFees"
      | "vaultManagerFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowDepositToken",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowDepositToken",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultManagerFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultManagerFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultManagerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultManagerFees",
    data: BytesLike
  ): Result;

  events: {
    "TokenAllowed(address)": EventFragment;
    "TokenDisallowed(address)": EventFragment;
    "VaultManagerFeesUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDisallowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultManagerFeesUpdated"): EventFragment;
}

export interface TokenAllowedEventObject {
  token: string;
}
export type TokenAllowedEvent = TypedEvent<[string], TokenAllowedEventObject>;

export type TokenAllowedEventFilter = TypedEventFilter<TokenAllowedEvent>;

export interface TokenDisallowedEventObject {
  token: string;
}
export type TokenDisallowedEvent = TypedEvent<
  [string],
  TokenDisallowedEventObject
>;

export type TokenDisallowedEventFilter = TypedEventFilter<TokenDisallowedEvent>;

export interface VaultManagerFeesUpdatedEventObject {
  fees: BigNumber;
}
export type VaultManagerFeesUpdatedEvent = TypedEvent<
  [BigNumber],
  VaultManagerFeesUpdatedEventObject
>;

export type VaultManagerFeesUpdatedEventFilter =
  TypedEventFilter<VaultManagerFeesUpdatedEvent>;

export interface IVaultManagerConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultManagerConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accessController(overrides?: CallOverrides): Promise<[string]>;

    allowDepositToken(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedTokens(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    disallowDepositToken(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _accessController: PromiseOrValue<string>,
      _protocolRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVaultManagerFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultManagerFees(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  accessController(overrides?: CallOverrides): Promise<string>;

  allowDepositToken(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedTokens(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  disallowDepositToken(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _accessController: PromiseOrValue<string>,
    _protocolRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVaultManagerFees(
    _fees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultManagerFees(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accessController(overrides?: CallOverrides): Promise<string>;

    allowDepositToken(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowedTokens(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disallowDepositToken(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _accessController: PromiseOrValue<string>,
      _protocolRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultManagerFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultManagerFees(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "TokenAllowed(address)"(token?: null): TokenAllowedEventFilter;
    TokenAllowed(token?: null): TokenAllowedEventFilter;

    "TokenDisallowed(address)"(token?: null): TokenDisallowedEventFilter;
    TokenDisallowed(token?: null): TokenDisallowedEventFilter;

    "VaultManagerFeesUpdated(uint256)"(
      fees?: null
    ): VaultManagerFeesUpdatedEventFilter;
    VaultManagerFeesUpdated(fees?: null): VaultManagerFeesUpdatedEventFilter;
  };

  estimateGas: {
    accessController(overrides?: CallOverrides): Promise<BigNumber>;

    allowDepositToken(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedTokens(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disallowDepositToken(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _accessController: PromiseOrValue<string>,
      _protocolRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVaultManagerFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultManagerFees(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accessController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowDepositToken(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disallowDepositToken(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _accessController: PromiseOrValue<string>,
      _protocolRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVaultManagerFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultManagerFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
