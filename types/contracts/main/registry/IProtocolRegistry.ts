/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IProtocolRegistry {
  export type TokenRecordStruct = {
    enabled: PromiseOrValue<boolean>;
    handler: PromiseOrValue<string>;
  };

  export type TokenRecordStructOutput = [boolean, string] & {
    enabled: boolean;
    handler: string;
  };
}

export interface IProtocolRegistryInterface extends utils.Interface {
  functions: {
    "getPriceOracle()": FunctionFragment;
    "getProtocolFee()": FunctionFragment;
    "getProtocolPause()": FunctionFragment;
    "getTokenInformation(address)": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "getWETH()": FunctionFragment;
    "isEnabled(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPriceOracle"
      | "getProtocolFee"
      | "getProtocolPause"
      | "getTokenInformation"
      | "getTreasury"
      | "getWETH"
      | "isEnabled"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInformation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isEnabled",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEnabled", data: BytesLike): Result;

  events: {};
}

export interface IProtocolRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProtocolRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    getProtocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProtocolPause(overrides?: CallOverrides): Promise<[boolean]>;

    getTokenInformation(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IProtocolRegistry.TokenRecordStructOutput]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    getWETH(overrides?: CallOverrides): Promise<[string]>;

    isEnabled(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolPause(overrides?: CallOverrides): Promise<boolean>;

  getTokenInformation(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IProtocolRegistry.TokenRecordStructOutput>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  getWETH(overrides?: CallOverrides): Promise<string>;

  isEnabled(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolPause(overrides?: CallOverrides): Promise<boolean>;

    getTokenInformation(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IProtocolRegistry.TokenRecordStructOutput>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    getWETH(overrides?: CallOverrides): Promise<string>;

    isEnabled(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolPause(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenInformation(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getWETH(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabled(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolPause(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenInformation(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEnabled(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
